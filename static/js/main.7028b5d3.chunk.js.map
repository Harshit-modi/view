{"version":3,"sources":["reducers/loadMoreReducer.js","middleware/api.js","components/Reactstrap.js","containers/Users.js","actions/loadMoreAction.js","App.js","serviceWorker.js","index.js","store.js","logo.svg"],"names":["loadMoreReducer","state","arguments","length","undefined","users","pageCount","isFetching","action","type","Object","objectSpread","response","newState","merge","entities","API_ROOT","userSchema","schema","Entity","idAttribute","user","email","Schemas","USER","USER_ARRAY","api","store","next","callAPI","endpoint","types","getState","Error","Array","isArray","every","actionWith","data","finalAction","assign","_types","slicedToArray","requestType","successType","failureType","fullUrl","indexOf","fetch","then","json","ok","Promise","reject","camelizedJson","camelizeKeys","results","normalize","info","page","callApi","error","message","spinnerStyle","position","background","top","left","width","height","tableHeadingStyle","fontWeight","border","headingCell","borderRight","dataStyle","minHeight","dataCellStyle","Reactstrap","handleLoadMore","_this","props","onLoadMore","onScroll","window","innerHeight","scrollY","document","body","offsetHeight","userData","renderItem","_ref","_ref2","key","item","react_default","a","createElement","className","style","src","picture","thumbnail","toTitleCase","name","title","first","last","Date","dob","date","toLocaleDateString","location","street","city","postcode","cell","addEventListener","this","removeEventListener","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","usersList","entries","map","spinnerBlock","Spinner","animation","Component","Users","loadMoreData","componentDidMount","loadInitData","marginBottom","Reactstrap_Reactstrap","connect","dispatch","defineProperty","_ref3$pageCount","nextPageUrl","fetchMoreUsers","Root","logo","alt","App","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","es","createStore","compose","applyMiddleware","thunk","react_router_dom","basename","process","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7028b5d3.chunk.js","sourcesContent":["import merge from 'lodash/merge'\n\nexport default (state = { users: {}, pageCount: 0, isFetching: false }, action) => {\n    switch (action.type) {\n        case 'REQUEST':\n            return {\n                ...state,\n                isFetching: true\n            }\n\n        case 'SUCCESS':\n            if (action.response) {\n                let newState = merge({}, state, action.response.entities)\n                newState.pageCount = action.response.pageCount + 1\n                newState.isFetching = false\n                return newState\n            }\n            return {\n                ...state,\n                isFetching: false\n            }\n        case 'FAILURE':\n            return {\n                ...state,\n                isFetching: false\n            }\n        default:\n            return state;\n    }\n}","import { normalize, schema } from 'normalizr'\nimport { camelizeKeys } from 'humps'\n\n// https://randomuser.me/api/?page=1&results=20&seed=test\nconst API_ROOT = 'https://randomuser.me/api/'\n\nconst callApi = (endpoint, schema) => {\n  const fullUrl = (endpoint.indexOf(API_ROOT) === -1) ? API_ROOT + endpoint : endpoint\n  return fetch(fullUrl)\n    .then(response =>\n      response.json().then(json => {\n        if (!response.ok) {\n          return Promise.reject(json)\n        }\n\n        const camelizedJson = camelizeKeys(json.results)\n\n        return Object.assign({},\n          normalize(camelizedJson, schema),\n          { pageCount: json.info.page }\n        )\n      })\n    )\n}\n\nconst userSchema = new schema.Entity('users', {}, {\n  idAttribute: user => user.email\n})\n\nexport const Schemas = {\n  USER: userSchema,\n  USER_ARRAY: [userSchema]\n}\n\nexport const CALL_API = 'Call API'\n\nexport default store => next => action => {\n  const callAPI = action[CALL_API]\n  if (typeof callAPI === 'undefined') {\n    return next(action)\n  }\n\n  let { endpoint } = callAPI\n  const { schema, types } = callAPI\n\n  if (typeof endpoint === 'function') {\n    endpoint = endpoint(store.getState())\n  }\n\n  if (typeof endpoint !== 'string') {\n    throw new Error('Specify a string endpoint URL.')\n  }\n  if (!schema) {\n    throw new Error('Specify one of the exported Schemas.')\n  }\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected an array of three action types.')\n  }\n  if (!types.every(type => typeof type === 'string')) {\n    throw new Error('Expected action types to be strings.')\n  }\n\n  const actionWith = data => {\n    const finalAction = Object.assign({}, action, data)\n    delete finalAction[CALL_API]\n    return finalAction\n  }\n\n  const [ requestType, successType, failureType ] = types\n  next(actionWith({ type: requestType }))\n\n  return callApi(endpoint, schema).then(\n    response => next(actionWith({\n      response,\n      type: successType\n    })),\n    error => next(actionWith({\n      type: failureType,\n      error: error.message || 'Something bad happened'\n    }))\n  )\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Spinner } from 'react-bootstrap';\n\nconst spinnerStyle = {\n    position: 'fixed',\n    background: 'white',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n}\n\nconst tableHeadingStyle = {\n    fontWeight: 'bold',\n    border: '1px solid'\n}\n\nconst headingCell = {\n    borderRight: '1px solid'\n}\n\nconst dataStyle = {\n    border: '1px solid',\n    minHeight: '100px'\n}\n\nconst dataCellStyle = {\n}\n\nexport default class Reactstrap extends Component {\n    static propTypes = {\n        userData: PropTypes.object.isRequired,\n        onLoadMore: PropTypes.func.isRequired\n    }\n\n    handleLoadMore = () => {\n        this.props.onLoadMore()\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.onScroll, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScroll, false);\n    }\n\n    onScroll = () => {\n        if ((window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 500) && this.props.userData) {\n            this.handleLoadMore()\n        }\n    }\n\n    toTitleCase(str) {\n        return str.replace(\n            /\\w\\S*/g,\n            function(txt) {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            }\n        );\n    }\n\n    renderItem = ([key, item]) => {\n        return (\n            <div className=\"row align-items-center\" key={key} style={dataStyle}>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                    <img src={item.picture.thumbnail} />\n                </div>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                {this.toTitleCase(item.name.title)} {this.toTitleCase(item.name.first)} {this.toTitleCase(item.name.last)}\n                </div>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                    {item.email}\n                </div>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                    {new Date(item.dob.date).toLocaleDateString()}\n                </div>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                    {item.location.street}, <br />\n                    {item.location.city}, {item.location.state}. {item.location.postcode}\n                </div>\n                <div className=\"col-6 col-sm\" style={dataCellStyle}>\n                    {item.cell}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let usersList = Object.entries(this.props.userData).map(this.renderItem);\n        let spinnerBlock = (\n            <div style={spinnerStyle} className=\"d-flex align-items-center justify-content-center\">\n                <Spinner animation=\"border\" />\n            </div>);\n        return (\n            <div className=\"container\">\n                <div className=\"row\" style={tableHeadingStyle}>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        Picture\n                    </div>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        Name\n                    </div>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        Email\n                    </div>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        DOB\n                    </div>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        Address\n                    </div>\n                    <div className=\"col-6 col-sm\" style={headingCell}>\n                        Phone\n                    </div>\n                </div>\n                {usersList}\n                {this.props.isFetching ? spinnerBlock : null}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Reactstrap from '../components/Reactstrap'\nimport { loadInitData, loadMoreData } from \"../actions/loadMoreAction\"\n\nclass Users extends Component {\n    static propTypes = {\n        userData: PropTypes.string.isRequired\n    }\n\n    handleLoadMore = () => {\n        this.props.loadMoreData()\n    }\n\n    componentDidMount = () => {\n        this.props.loadInitData()\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 style={{marginBottom: '30px'}}>Users</h1>\n                <Reactstrap userData={this.props.userData}\n                            onLoadMore={this.handleLoadMore}\n                            isFetching={this.props.isFetching} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    userData: state.users,\n    isFetching: state.isFetching\n   })\n\nexport default connect(mapStateToProps, {\n    loadInitData,\n    loadMoreData\n})(Users);","import { CALL_API, Schemas } from '../middleware/api'\n\nexport const USER_REQUEST = 'REQUEST'\nexport const USER_SUCCESS = 'SUCCESS'\nexport const USER_FAILURE = 'FAILURE'\n\nconst fetchUser = () => ({\n    [CALL_API]: {\n        types: [USER_REQUEST, USER_SUCCESS, USER_FAILURE],\n        endpoint: `?page=1&results=20&seed=test`,\n        schema: Schemas.USER_ARRAY\n    }\n})\n\n\nexport const loadInitData = () => dispatch => {\n    return dispatch(fetchUser())\n}\n\nexport const STARRED_REQUEST = 'REQUEST'\nexport const STARRED_SUCCESS = 'SUCCESS'\nexport const STARRED_FAILURE = 'FAILURE'\n\nconst fetchMoreUsers = (nextPageUrl) => ({\n    [CALL_API]: {\n        types: [STARRED_REQUEST, STARRED_SUCCESS, STARRED_FAILURE],\n        endpoint: nextPageUrl,\n        schema: Schemas.USER_ARRAY\n    }\n})\n\nexport const loadMoreData = () => (dispatch, getState) => {\n    const {\n        pageCount = 0\n    } = getState() || {}\n\n    const nextPageUrl = `?page=` + pageCount + `&results=20&seed=test`;\n\n    return dispatch(fetchMoreUsers(nextPageUrl))\n}","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Users from './containers/Users';\n\nconst Root = () => (\n  <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to React</h2>\n        </div>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Root} />\n      <Route path=\"/users\" component={Users} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <Router basename={process.env.PUBLIC_URL}>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport loadMoreReducer from './reducers/loadMoreReducer';\nimport api from './middleware/api'\n\nexport default function configureStore() {\n    return createStore(\n        loadMoreReducer,\n        compose(\n            applyMiddleware(thunk, api)\n        )\n    );\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}